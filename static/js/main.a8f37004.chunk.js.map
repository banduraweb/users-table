{"version":3,"sources":["components/Header/Header.js","constants/users-data.js","components/Form/Form.js","components/ModalWindow/ModalWindow.js","components/Content/TableContent.js","App.js","index.js"],"names":["Header","dbInfo","console","log","Navbar","bg","variant","id","Brand","href","Nav","className","Link","name","verno","Form","inline","FormControl","type","placeholder","USERS_TYPES_DATA","FIRST_NAME","LAST_NAME","PHONE","GENDER","AGE","_id","INIT_FORM_ERROR","isValidFirstName","isValidLastName","isValidPhone","isValidGender","isValidAge","FormRegistration","getUsersInfo","onSubmitUsersData","userState","getValidationReport","isSubmit","useState","errorValidate","setErrorValidate","validatingForm","target","value","check","toLowerCase","replace","length","onSubmit","border","Row","Group","as","Col","Label","Control","onBlur","onChange","Text","e","min","max","sm","Button","onClick","Object","values","every","Boolean","role","ModalWindow","userData","getConfirmDeleteUser","CANCEL","DELETE","confirm","setConfirm","firstName","lastName","Modal","Dialog","Title","Body","Footer","TableContent","userDataBase","deleteUser","selected","InfoForDeleteUser","setInfoForDeleteUset","isClicked","users","renderData","setRenderData","ALL_USERS","useEffect","Table","striped","bordered","hover","responsive","keys","map","elem","key","filterType","isNaN","sort","a","b","localeCompare","handleSort","idx","surname","oncancel","ondelete","USER_INIT_STATE","DATABASE_OF_USERS","DB_READY_INFO","App","async","db","on","DB_READY","toArray","allUsers","setTimeout","setUserDataBase","getUsers","setUsersInfo","isEmptyDataBase","setStatusDataBase","setStatusSubmit","Dexie","version","stores","count","open","catch","err","stack","report","Container","preventDefault","dataCheck","some","reportValidDataCheck","user","uuid","add","then","validationReport","delete","Spinner","animation","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a8f37004.chunk.js","sourcesContent":["import React from \"react\";\nimport { Form, Navbar, Nav, FormControl,  } from \"react-bootstrap\";\n\nconst Header = ({dbInfo}) => {\n    console.log(dbInfo);\n    console.log(dbInfo);\n    return (\n        <>\n            <Navbar bg=\"dark\" variant=\"dark\" id=\"header__navbar\">\n                <Navbar.Brand href=\"#home\">INDEXEDDB API</Navbar.Brand>\n                <Nav className=\"mr-auto\">\n                    <Nav.Link href=\"#home\">indexedDB: {dbInfo && dbInfo.name  ? \"CONNECTED\" : \"CONNECTING...\" } </Nav.Link>\n                    <Nav.Link href=\"#features\">Version: {dbInfo && dbInfo.verno}</Nav.Link>\n                </Nav>\n                <Form inline>\n                    <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\n                </Form>\n            </Navbar>\n        </>\n    );\n};\n\nexport default Header;\n","export const USERS_TYPES_DATA = {\n    FIRST_NAME: 'First Name',\n    LAST_NAME: 'Last Name',\n    PHONE: 'Phone +38',\n    GENDER: 'Gender',\n    AGE: 'Age',\n    _id: ''\n};","import React, {useState} from \"react\";\nimport {Form, Button, Col} from \"react-bootstrap\";\nimport {USERS_TYPES_DATA} from \"../../constants/users-data\";\n\nconst INIT_FORM_ERROR = {\n    isValidFirstName: null,\n    isValidLastName: null,\n    isValidPhone: null,\n    isValidGender: null,\n    isValidAge: null\n};\n\nconst FormRegistration = ({\n                              getUsersInfo,\n                              onSubmitUsersData,\n                              userState,\n                              getValidationReport,\n                              isSubmit\n                          }) => {\n    const [errorValidate, setErrorValidate] = useState(INIT_FORM_ERROR);\n    console.log(isSubmit);\n    const {FIRST_NAME, LAST_NAME, PHONE, GENDER, AGE} = userState;\n\n    const validatingForm = ({target}) => {\n        const {value, name} = target;\n\n        let check = \"\";\n        switch (name) {\n            case \"FIRST_NAME\":\n                check = value.toLowerCase().replace(/[a-z]/g, \"\").length;\n                if (check > 0 || value.length === 0) {\n                    setErrorValidate({\n                        ...errorValidate,\n                        isValidFirstName: false\n                    });\n                } else {\n                    setErrorValidate({\n                        ...errorValidate,\n                        isValidFirstName: true\n                    });\n                }\n                break;\n            case \"LAST_NAME\":\n                check = value.toLowerCase().replace(/[a-z]/g, \"\").length;\n                if (check > 0 || value.length === 0) {\n                    setErrorValidate({\n                        ...errorValidate,\n                        isValidLastName: false\n                    });\n                } else {\n                    setErrorValidate({\n                        ...errorValidate,\n                        isValidLastName: true\n                    });\n                }\n                break;\n            case \"PHONE\":\n                check = value.toLowerCase().replace(/[0-9]/g, \"\").length;\n\n                if (\n                    check !== 0 ||\n                    (check === 0 && value.length > 10) ||\n                    (check === 0 && value.length < 5)\n                ) {\n                    setErrorValidate({\n                        ...errorValidate,\n                        isValidPhone: false\n                    });\n                } else {\n                    setErrorValidate({\n                        ...errorValidate,\n                        isValidPhone: true\n                    });\n                }\n                break;\n            case \"GENDER\":\n                if (value !== \"0\") {\n                    setErrorValidate({\n                        ...errorValidate,\n                        isValidGender: true\n                    });\n                } else {\n                    setErrorValidate({\n                        ...errorValidate,\n                        isValidGender: false\n                    });\n                }\n                break;\n            case \"AGE\":\n                if (+value < 1 || +value > 100) {\n                    setErrorValidate({\n                        ...errorValidate,\n                        isValidAge: false\n                    });\n                } else {\n                    setErrorValidate({\n                        ...errorValidate,\n                        isValidAge: true\n                    });\n                }\n                break;\n        }\n        return errorValidate;\n    };\n\n    const resetHighLighting = () => {\n        if (Object.values(errorValidate).every(Boolean)) {\n            setErrorValidate(INIT_FORM_ERROR);\n        }\n    };\n\n    const {\n        isValidFirstName,\n        isValidAge,\n        isValidGender,\n        isValidLastName,\n        isValidPhone\n    } = errorValidate;\n\n    return (\n        <Form onSubmit={onSubmitUsersData} className=\"w-75 p-3 mx-auto form_custom\" border=\"primary\">\n            <Form.Row>\n                <Form.Group as={Col}>\n                    <Form.Label>{USERS_TYPES_DATA.FIRST_NAME}</Form.Label>\n                    <Form.Control\n                        className={isValidFirstName === null\n                            ? null\n                            :\n                            !isValidFirstName\n                                ? \"warning\"\n                                : \"success\"}\n                        onBlur={validatingForm}\n                        onChange={getUsersInfo}\n                        name={\"FIRST_NAME\"}\n                        value={FIRST_NAME}\n                        type=\"text\"\n                        placeholder={`${USERS_TYPES_DATA.FIRST_NAME.toLowerCase()}`}\n                    />\n                    <Form.Text className=\"text-muted\"></Form.Text>\n                </Form.Group>\n\n                <Form.Group as={Col}>\n                    <Form.Label>{USERS_TYPES_DATA.LAST_NAME}</Form.Label>\n                    <Form.Control\n                        className={isValidLastName === null\n                            ? null\n                            :\n                            !isValidLastName\n                                ? \"warning\"\n                                : \"success\"}\n                        onBlur={validatingForm}\n                        onChange={getUsersInfo}\n                        value={LAST_NAME}\n                        name={\"LAST_NAME\"}\n                        type=\"text\"\n                        placeholder={`${USERS_TYPES_DATA.LAST_NAME.toLowerCase()}`}\n                    />\n                    <Form.Text className=\"text-muted\"></Form.Text>\n                </Form.Group>\n            </Form.Row>\n            <Form.Row>\n\n\n                <Form.Group as={Col}>\n                    <Form.Label>{USERS_TYPES_DATA.GENDER}</Form.Label>\n                    <Form.Control\n                        className={isValidGender === null\n                            ? null\n                            :\n                            !isValidGender\n                                ? \"warning\"\n                                : \"success\"}\n\n                        value={GENDER}\n                        onChange={e => {\n                            getUsersInfo(e);\n                            validatingForm(e);\n                        }}\n                        as=\"select\"\n                        name={\"GENDER\"}\n                    >\n                        <option value={0}>Choose</option>\n                        <option value=\"male\">male</option>\n                        <option value=\"female\">female</option>\n                    </Form.Control>\n                </Form.Group>\n\n                <Form.Group as={Col}>\n                    <Form.Label>{USERS_TYPES_DATA.AGE}</Form.Label>\n                    <Form.Control\n\n                        className={isValidAge === null\n                            ? null\n                            :\n                            !isValidAge\n                                ? \"warning\"\n                                : \"success\"}\n\n                        onChange={e => {\n                            getUsersInfo(e);\n                            validatingForm(e);\n                        }}\n                        type=\"number\"\n                        name={\"AGE\"}\n                        value={AGE}\n                        placeholder={`${USERS_TYPES_DATA.AGE.toLowerCase()}`}\n                        min={1}\n                        max={100}\n                    />\n                    <Form.Text className=\"text-muted\"></Form.Text>\n                </Form.Group>\n            </Form.Row>\n\n\n            <Col sm={4} className=\"m-sm-auto\">\n                <Form.Group>\n                    <Form.Label>\n                        {USERS_TYPES_DATA.PHONE.replace(/[^a-zA-Z]/g, \"\")}\n                    </Form.Label>\n                    <Form.Control\n                        className={isValidPhone === null\n                            ? null\n                            :\n                            !isValidPhone\n                                ? \"warning\"\n                                : \"success\"}\n\n                        onChange={getUsersInfo}\n                        onBlur={validatingForm}\n                        value={PHONE}\n                        name={\"PHONE\"}\n                        type=\"text\"\n                        placeholder={`${USERS_TYPES_DATA.PHONE.toLowerCase().replace(\n                            /phone/,\n                            \"\"\n                        )}`}\n                    />\n                    <Form.Text className=\"text-muted\"></Form.Text>\n                </Form.Group>\n            </Col>\n            <>\n                <Button\n                    onClick={() => {\n                        getValidationReport(errorValidate);\n                        resetHighLighting();\n                    }}\n                    variant=\"primary\"\n                    type=\"submit\"\n                >\n                    Submit\n                </Button>\n                {isSubmit === null\n                    ? null\n                    : !isSubmit\n                    && <span className=\"alert alert-primary\" role=\"alert\">\n                        You should fill the form before submit\n                </span>}\n            </>\n        </Form>\n    );\n};\n\nexport default FormRegistration;\n","import React, {useState} from \"react\";\nimport {Button, Modal} from \"react-bootstrap\";\n\n\nconst ModalWindow = ({userData, getConfirmDeleteUser}) => {\n    const [confirm, setConfirm] = useState({\n        CANCEL: '',\n        DELETE: ''\n    });\n\n    const {CANCEL, DELETE} = confirm;\n    const {firstName, lastName, id} = userData;\n\n    getConfirmDeleteUser(CANCEL, DELETE, id);\n\n    return (\n        <>\n            <Modal.Dialog className=\"fixed-top\">\n                <Modal.Header >\n                    <Modal.Title>Please confirm deleting user from IndexedDB</Modal.Title>\n                </Modal.Header>\n\n                <Modal.Body>\n                    <p>NAME: {firstName} {lastName}</p>\n                    <p>ID: {id}</p>\n                </Modal.Body>\n\n                <Modal.Footer>\n                    <Button onClick={()=>{setConfirm({CANCEL: \"CANCEL\"})}}\n                        variant=\"secondary\">Cancel</Button>\n                    <Button onClick={()=>{setConfirm({DELETE: \"DELETE\"})}}\n                        variant=\"primary\">Delete</Button>\n                </Modal.Footer>\n            </Modal.Dialog>\n        </>\n    )\n\n};\n\nexport default ModalWindow;","import React, {useState, useEffect} from \"react\";\nimport {Table, Button} from \"react-bootstrap\";\nimport {USERS_TYPES_DATA} from \"../../constants/users-data\";\nimport ModalWindow from \"../ModalWindow/ModalWindow\";\n\nconst TableContent = ({userDataBase, deleteUser}) => {\n    const [InfoForDeleteUser, setInfoForDeleteUset] = useState({\n        selected: false,\n        id: null,\n        firstName: null,\n        lastName: null\n    });\n    const [renderData, setRenderData] = useState({\n        isClicked: false,\n        users: []\n    });\n    const {ALL_USERS} = userDataBase;\n\n    useEffect(()=>{\n        setRenderData({\n            ...renderData,\n            users: ALL_USERS\n        })\n    },[ALL_USERS]);\n\n    const {users, isClicked} = renderData;\n\n    const handleSort = (filterType) => {\n        console.log('isClicked');\n        switch (!isNaN(+ALL_USERS[0][filterType])) {\n            case true:\n                isClicked ?\n                setRenderData({\n                    isClicked: !isClicked,\n                    users: [...ALL_USERS].sort((a, b) => +a[filterType] - (+b[filterType]))\n                    }) :  setRenderData({\n                        isClicked: !isClicked,\n                        users: [...ALL_USERS].sort((a, b) => +b[filterType] - (+a[filterType]))\n                    });\n                break;\n            case false:\n                isClicked ?\n                    setRenderData({\n                        isClicked: !isClicked,\n                        users: [...ALL_USERS].sort((a, b) => b[filterType].localeCompare(a[filterType]))\n                    }) :  setRenderData({\n                        isClicked: !isClicked,\n                        users: [...ALL_USERS].sort((a, b) => a[filterType].localeCompare(b[filterType]))\n                    });\n                break;\n\n            default:\n                setRenderData({\n                    ...renderData,\n                    users: ALL_USERS\n                })\n        }\n    };\n    const getUserInfoBeforeDelete =(id,name,surname)=> {\n        setInfoForDeleteUset({\n            ...InfoForDeleteUser,\n            selected: true,\n            id: id,\n            firstName: name,\n            lastName: surname\n        });\n    };\n\n    const getConfirmDeleteUser=(oncancel, ondelete, id)=>{\n\n        if (oncancel) {\n            setInfoForDeleteUset({\n                selected: false,\n                id: null,\n                firstName: null,\n                lastName: null\n            })\n        } else if (ondelete) {\n            deleteUser(id);\n            setInfoForDeleteUset({\n                selected: false,\n                id: null,\n                firstName: null,\n                lastName: null\n            })\n        }\n\n    };\n\n    const {selected} = InfoForDeleteUser;\n    return (\n        <>\n        <Table striped bordered hover variant=\"dark\" responsive=\"sm\" id=\"table\" className=\"table-custom table-responsive\">\n            <thead>\n            <tr>\n                <th>#</th>\n                {Object.keys(USERS_TYPES_DATA).map(elem => {\n                    return (\n                        <th key={elem}>\n                            {elem.replace(/_/g,' ')}&#8195;\n                            <Button className=\"btn_search\"\n                                    onClick={() => handleSort(elem)}\n                                    variant=\"outline-info\">\n                                Sort <i className=\"fas fa-sort\"></i>\n\n                            </Button>\n                        </th>\n                    )\n\n                })}\n\n            </tr>\n            </thead>\n            <tbody>\n            {\n                users.map(\n                ({_id, FIRST_NAME, LAST_NAME, PHONE, GENDER, AGE}, idx) => (\n\n                    <tr key={_id}>\n                        <td>{++idx}</td>\n                        <td>{FIRST_NAME}</td>\n                        <td>{LAST_NAME}</td>\n                        <td>{PHONE}</td>\n                        <td>{GENDER}</td>\n                        <td>{AGE}</td>\n                        <td>{_id}\n                        <Button onClick={()=>getUserInfoBeforeDelete(_id,FIRST_NAME,LAST_NAME)}\n                            variant=\"info\">delete user\n                        </Button>\n                        </td>\n\n                    </tr>\n\n\n                )\n            )}\n            </tbody>\n        </Table>\n            {selected && <ModalWindow\n                userData={InfoForDeleteUser}\n                getConfirmDeleteUser={getConfirmDeleteUser}\n\n            />}\n\n            </>\n    );\n};\n\nexport default TableContent;\n","import React, {useState, useEffect} from \"react\";\nimport Dexie from \"dexie\";\nimport {Spinner, Container} from \"react-bootstrap\";\nimport uuid from 'react-uuid'\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\nimport Header from \"./components/Header/Header\";\nimport FormRegistration from \"./components/Form/Form\";\nimport TableContent from \"./components/Content/TableContent\";\n\nconst USER_INIT_STATE = {\n    FIRST_NAME: \"\",\n    LAST_NAME: \"\",\n    PHONE: \"\",\n    GENDER: \"\",\n    AGE: \"\"\n};\n\nconst DATABASE_OF_USERS = {\n    ALL_USERS: [],\n    DB_READY_INFO: {}\n};\n\nfunction App() {\n\n    useEffect(() => {\n        const getUsers = async () => {\n            let DB_READY = await db.on(\"ready\", () => (db));\n\n            // let DB_TABLE = await db.tables.find((table) => table.name);\n            let allUsers = await db.userDataBase.toArray();\n\n            setTimeout(() => {\n                setUserDataBase({\n                    ...userDataBase,\n                    ALL_USERS: allUsers,\n                    DB_READY_INFO: DB_READY,\n                });\n            }, 1500)\n\n\n        };\n        getUsers();\n    }, []);\n\n    const [userState, setUsersInfo] = useState(USER_INIT_STATE);\n    const [userDataBase, setUserDataBase] = useState(DATABASE_OF_USERS);\n    const [isEmptyDataBase, setStatusDataBase] = useState(null);\n    const [isSubmit, setStatusSubmit] = useState(null);\n\n    const db = new Dexie(\"ReactDexie\");\n\n    db.version(1).stores({\n        userDataBase: \"_id, firstName, lastName, phone, gender, age\"\n    });\n\n    // db.version(1).stores({\n    //     userDataBase: \"++id,someIndex\"\n    // });\n\n    db.on('ready', function () {\n        return db.userDataBase.count(function (count) {\n            if (count > 0) {\n                setTimeout(()=>{\n                setStatusDataBase(false);\n                console.log(\"Already populated\");\n                },1500);\n            } else {\n                setTimeout(()=>{\n                    setStatusDataBase(true);\n                    console.log(\"Database is empty\");\n                },1500);\n\n            }\n        })\n    });\n\n    db.open().catch(err => {\n\n        console.log(err.stack || err);\n    });\n\n    let report = {};\n    const getValidationReport = (validationReport) => {\n        report = validationReport\n    };\n\n\n    const onSubmitUsersData = e => {\n        e.preventDefault();\n        const dataCheck = !Object.values(userState).some(elem => elem === '');\n        const reportValidDataCheck = Object.values(report).every(Boolean);\n        if (dataCheck && reportValidDataCheck) {\n\n            const {FIRST_NAME, LAST_NAME, PHONE, GENDER, AGE} = userState;\n\n            let user = {\n                _id: uuid(),\n                FIRST_NAME: FIRST_NAME,\n                LAST_NAME: LAST_NAME,\n                PHONE: PHONE,\n                GENDER: GENDER,\n                AGE: AGE\n            };\n            db.userDataBase.add(user).then(async () => {\n                let allUsers = await db.userDataBase.toArray();\n                setUserDataBase({\n                    ...userDataBase,\n                    ALL_USERS: allUsers\n                });\n            });\n\n            setUsersInfo(USER_INIT_STATE);\n            setStatusSubmit(true)\n\n        } else {\n            setStatusSubmit(false)\n        }\n    };\n\n\n    const getUsersInfo = e => {\n        setUsersInfo({\n            ...userState,\n            [e.target.name]: e.target.value\n        });\n    };\n\n\n    const deleteUser = async(id) => {\n        db.userDataBase.delete(id);\n        let allUsers = await db.userDataBase.toArray();\n        setUserDataBase({\n            ...userDataBase,\n            ALL_USERS: allUsers\n        });\n    };\n\n    const {ALL_USERS, DB_READY_INFO} = userDataBase;\n    console.log(ALL_USERS,\"ALL_USERS\");\n    return (\n        <Container>\n            <Header dbInfo={DB_READY_INFO}/>\n            <FormRegistration\n                getUsersInfo={getUsersInfo}\n                onSubmitUsersData={onSubmitUsersData}\n                userState={userState}\n                getValidationReport={getValidationReport}\n                isSubmit={isSubmit}\n\n            />\n\n            {\n                (\n                    <>\n                        {isEmptyDataBase\n                            ? (\n                                <div className=\"d-flex justify-content-center\">\n                                <span>Database is empty...</span>\n                                </div>\n                            )\n                            : ALL_USERS.length > 0\n                                ? <TableContent\n                                    userDataBase={userDataBase}\n                                    deleteUser={deleteUser}\n\n                                />\n                                : (\n                                    <div className=\"d-flex justify-content-center\">\n                                        <Spinner animation=\"grow\" variant=\"primary\" />\n                                    </div>\n                                )\n                        }\n                    </>\n                )}\n\n\n        </Container>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n"],"sourceRoot":""}